// This file was automatically generated by Gameduo Center Manager.
// Do not modify it manually!123

using System;
using System.Collections.Generic;
using UnityEngine;

namespace Glider.Core.SerializableData
{
	[Serializable]
	public class CloudDataWrapper
	{
		private Dictionary<string, int> _crcCodes=new();
		private Dictionary<string, bool> _dirty=new();
		[SerializeField] private CharacterCurrencyWrapper currency = new();
		public CharacterCurrencyWrapper Currency=>currency;
		private string FieldNameLevel="level";
		[SerializeField] private CharacterLevel level = new();
		public CharacterLevel GetLevel()
		{
			if (_crcCodes[FieldNameLevel] != level.CreateCrdCode())
				throw new InvalidCloudDataHashException("Failed to retrieve cloud data due to invalid hash.", "level", JsonUtility.ToJson(level));
			var res = new CharacterLevel();
			res = level;
			return res;
		}
		public void SetLevel(CharacterLevel value)
		{
			var crdCode = this.level.CreateCrdCode();
			if (_crcCodes[FieldNameLevel] != crdCode)
				throw new InvalidCloudDataHashException("Failed to set cloud data due to invalid hash.", "level", JsonUtility.ToJson(level), JsonUtility.ToJson(value));
			this.level = value;
			_crcCodes[FieldNameLevel]=value.CreateCrdCode();
			_dirty[FieldNameLevel] = true;
		}

		[SerializeField] private CharacterEquipmentWrapper equipment = new();
		public CharacterEquipmentWrapper Equipment=>equipment;
		[SerializeField] private CharacterSkillWrapper skill = new();
		public CharacterSkillWrapper Skill=>skill;
		[SerializeField] private CharacterDeckWrapper deck = new();
		public CharacterDeckWrapper Deck=>deck;
		private string FieldNameWorld="world";
		[SerializeField] private CharacterWorld world = new();
		public CharacterWorld GetWorld()
		{
			if (_crcCodes[FieldNameWorld] != world.CreateCrdCode())
				throw new InvalidCloudDataHashException("Failed to retrieve cloud data due to invalid hash.", "world", JsonUtility.ToJson(world));
			var res = new CharacterWorld();
			res = world;
			return res;
		}
		public void SetWorld(CharacterWorld value)
		{
			var crdCode = this.world.CreateCrdCode();
			if (_crcCodes[FieldNameWorld] != crdCode)
				throw new InvalidCloudDataHashException("Failed to set cloud data due to invalid hash.", "world", JsonUtility.ToJson(world), JsonUtility.ToJson(value));
			this.world = value;
			_crcCodes[FieldNameWorld]=value.CreateCrdCode();
			_dirty[FieldNameWorld] = true;
		}

		private string FieldNameQuest="quest";
		[SerializeField] private CharacterQuest quest = new();
		public CharacterQuest GetQuest()
		{
			if (_crcCodes[FieldNameQuest] != quest.CreateCrdCode())
				throw new InvalidCloudDataHashException("Failed to retrieve cloud data due to invalid hash.", "quest", JsonUtility.ToJson(quest));
			var res = new CharacterQuest();
			res = quest;
			return res;
		}
		public void SetQuest(CharacterQuest value)
		{
			var crdCode = this.quest.CreateCrdCode();
			if (_crcCodes[FieldNameQuest] != crdCode)
				throw new InvalidCloudDataHashException("Failed to set cloud data due to invalid hash.", "quest", JsonUtility.ToJson(quest), JsonUtility.ToJson(value));
			this.quest = value;
			_crcCodes[FieldNameQuest]=value.CreateCrdCode();
			_dirty[FieldNameQuest] = true;
		}

		[SerializeField] private CharacterStatWrapper stat = new();
		public CharacterStatWrapper Stat=>stat;
		[SerializeField] private CharacterTestWrapper tests = new();
		public CharacterTestWrapper Tests=>tests;
		public bool CheckDirty()
		{
			if (currency.IsDirty) return true;
			if (_dirty.ContainsKey(FieldNameLevel) && _dirty[FieldNameLevel]) return true;
			if (equipment.IsDirty) return true;
			if (skill.IsDirty) return true;
			if (deck.IsDirty) return true;
			if (_dirty.ContainsKey(FieldNameWorld) && _dirty[FieldNameWorld]) return true;
			if (_dirty.ContainsKey(FieldNameQuest) && _dirty[FieldNameQuest]) return true;
			if (stat.IsDirty) return true;
			if (tests.IsDirty) return true;
			return false;
		}

		public void UpdateCrc()
		{
			currency.UpdateCrcCode();
			_crcCodes[FieldNameLevel] = level.CreateCrdCode();
			equipment.UpdateCrcCode();
			skill.UpdateCrcCode();
			deck.UpdateCrcCode();
			_crcCodes[FieldNameWorld] = world.CreateCrdCode();
			_crcCodes[FieldNameQuest] = quest.CreateCrdCode();
			stat.UpdateCrcCode();
			tests.UpdateCrcCode();
		}

		public void SetPayload(ref List<string> keys, ref List<string> values)
		{
			if (currency.IsDirty) currency.SetPayload(ref keys,ref values);
			if (_dirty.ContainsKey(FieldNameLevel) && _dirty[FieldNameLevel])
			{
				keys.Add(FieldNameLevel);
				values.Add(JsonUtility.ToJson(level));
				_dirty[FieldNameLevel] = false;
			}
			if (equipment.IsDirty) equipment.SetPayload(ref keys,ref values);
			if (skill.IsDirty) skill.SetPayload(ref keys,ref values);
			if (deck.IsDirty) deck.SetPayload(ref keys,ref values);
			if (_dirty.ContainsKey(FieldNameWorld) && _dirty[FieldNameWorld])
			{
				keys.Add(FieldNameWorld);
				values.Add(JsonUtility.ToJson(world));
				_dirty[FieldNameWorld] = false;
			}
			if (_dirty.ContainsKey(FieldNameQuest) && _dirty[FieldNameQuest])
			{
				keys.Add(FieldNameQuest);
				values.Add(JsonUtility.ToJson(quest));
				_dirty[FieldNameQuest] = false;
			}
			if (stat.IsDirty) stat.SetPayload(ref keys,ref values);
			if (tests.IsDirty) tests.SetPayload(ref keys,ref values);
		}

	}
}
